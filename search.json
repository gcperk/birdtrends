[{"path":"https://ninoxconsulting.github.io/birdtrends/articles/Comparing-trends-over-time.html","id":"estimate-trajectory-using-annual-indices","dir":"Articles","previous_headings":"","what":"1. Estimate trajectory using annual indices","title":"Comparing-trends-over-time","text":"using annual indices dataset, can firstly estimate trend fit data using fit_hgam() function.","code":"indat1 <- annual_indicies_data  fitted_data <- fit_hgam(indat1,                         start_yr = NA,                         end_yr = NA,                         n_knots = NA) #> Running MCMC with 4 parallel chains... #>  #> Chain 1 finished in 2.1 seconds. #> Chain 2 finished in 2.1 seconds. #> Chain 3 finished in 2.0 seconds. #> Chain 4 finished in 2.3 seconds. #>  #> All 4 chains finished successfully. #> Mean chain execution time: 2.1 seconds. #> Total execution time: 2.5 seconds."},{"path":"https://ninoxconsulting.github.io/birdtrends/articles/Comparing-trends-over-time.html","id":"estimate-trends","dir":"Articles","previous_headings":"","what":"2. Estimate trends","title":"Comparing-trends-over-time","text":"Now posterior draws smoothed population trajectory, can estimate trends two different periods trajectory. example explore recent trend (2014-2022) previous trend (2004-2014).","code":"# estimate short term trend   trend_short <- get_trend(fitted_data,                          start_yr = 2014,                          end_yr = 2022,                          method = \"gmean\") |>     rename(trend_short = perc_trend)   # estimate previous trend  trend_previous <- get_trend(fitted_data,                             start_yr = 2004,                             end_yr = 2014,                             method = \"gmean\") |>    rename(trend_previous = perc_trend)"},{"path":"https://ninoxconsulting.github.io/birdtrends/articles/Comparing-trends-over-time.html","id":"plot-trends-relative-to-targets","dir":"Articles","previous_headings":"","what":"3. Plot trends relative to targets","title":"Comparing-trends-over-time","text":"visualize difference trends can project trend generate plot show difference.    upper plot shows projected recent short-term trend, suggests small probability species meeting 2026 2046 targets (orange uncertainty bounds slightly overlaps blue targets). lower plot shows short-term trend estimated 2004 2014 negative recent short-term trend.","code":"# project short term trend proj_trend_short <- proj_trend(fitted_data,                                trend_short,                                start_yr = 2023,                                proj_yr = 2050)   # project previous trend proj_trend_previous <- proj_trend(fitted_data,                                   trend_previous,                                   start_yr = 2015,                                   proj_yr = 2050)   # Get target values for plotting index_baseline <- get_targets(model_indices = fitted_data,                               ref_year = 2014,                               st_year = 2026,                               st_lu_target_pc = -2,                               st_up_target_pc = 1,                               lt_year = 2046,                               lt_lu_target_pc = 5,                               lt_up_target_pc = 10)  # generate short term plot  plot_target_short <- plot_trend(raw_indices = indat1,                                 model_indices = fitted_data,                                 pred_indices = proj_trend_short,                                 start_yr = 2014,                                 end_yr = 2022,                                 ref_yr = 2014,                                 targets = index_baseline) +   labs(title = \"Projection of recent trend from 2014-2022\")+   scale_y_continuous(limits = c(0,NA)) # generate short term plot  plot_target_previous <- plot_trend(raw_indices = indat1,                                    model_indices = fitted_data,                                    pred_indices = proj_trend_previous,                                    start_yr = 2004,                                    end_yr = 2014,                                    ref_yr = 2014,                                    targets = index_baseline) +   labs(title = \"Projection of trend from 2004-2014\") +   scale_y_continuous(limits = c(0,NA)) print(plot_target_short / plot_target_previous)"},{"path":"https://ninoxconsulting.github.io/birdtrends/articles/Comparing-trends-over-time.html","id":"calculate-difference-in-trends","dir":"Articles","previous_headings":"","what":"4. Calculate difference in trends","title":"Comparing-trends-over-time","text":"can combine projected estimates posterior draws calculate difference two trends. can use difference probability distributions quantify changes two trend periods. Lets calculate 5%, 50% 95% confidence estimates. short-term recent trend since 2014 2.27% greater trend 2004 2014, difference clearly positive, 95% confidence interval 0.13 4.35. comparison shows short-term trend estimated 2004 2014 continued, species reaching targets. ongoing decline troubling, species recent trends suggest population closer meeting targets 2014. ```","code":"trend_dif <- trend_previous %>%   inner_join(trend_short, by = \"draw\") %>%   mutate(trend_difference = trend_short-trend_previous) dif_trend <- round(quantile(trend_dif$trend_difference, c(0.05,0.5,0.95)),2) dif_trend #>   5%  50%  95%  #> 0.13 2.27 4.35"},{"path":"https://ninoxconsulting.github.io/birdtrends/articles/Estimate-and-project-trends-using-BBS-smooth-dataset.html","id":"set-up","dir":"Articles","previous_headings":"","what":"1. Set-up","title":"Estimate-and-project-trends-using-BBS-smooth-dataset","text":"Lets start loading libraries required.","code":"library(birdtrends) library(ggplot2) library(mgcv) library(dplyr) library(tidyr)"},{"path":"https://ninoxconsulting.github.io/birdtrends/articles/Estimate-and-project-trends-using-BBS-smooth-dataset.html","id":"extract-the-smooth-component-of-bbsbayes2-fit","dir":"Articles","previous_headings":"","what":"2. Extract the smooth component of bbsBayes2 fit","title":"Estimate-and-project-trends-using-BBS-smooth-dataset","text":"example data set provided within package. smooth component extracted full model Pacific Wren (“Troglodytes pacificus”), generated using bbsBayes2 package. data kindly provided .C. Smith. dataset contains modelled trajectory (annual indices) year (column) (1968 2022) draw (row). example dataset contains 4000 draws. can filter data year change format, using longform parameter.","code":"head(bbs_smooth_data) #>     year #> iter     1968     1969     1970     1971     1972     1973     1974     1975 #>    1 2.729978 2.965852 3.224092 3.508184 3.820407 4.160304 4.522964 4.897980 #>    2 2.180160 2.358044 2.557778 2.789192 3.059712 3.370122 3.712222 4.069773 #>    3 2.259041 2.577236 2.918296 3.252798 3.549116 3.789648 3.980238 4.147139 #>    4 1.923366 2.205235 2.533100 2.915137 3.350895 3.823103 4.294544 4.716662 #>    5 2.009798 2.291077 2.604190 2.943246 3.302940 3.682355 4.084891 4.513179 #>    6 2.394731 2.573529 2.772608 3.000554 3.263123 3.559511 3.880811 4.211895 #>     year #> iter     1976     1977     1978     1979     1980     1981     1982     1983 #>    1 5.269625 5.619058 5.928013 6.182812 6.376585 6.508391 6.579548 6.589843 #>    2 4.423286 4.757012 5.064161 5.346374 5.607431 5.843976 6.038604 6.159807 #>    3 4.324938 4.543100 4.816500 5.140478 5.490087 5.824123 6.094279 6.257846 #>    4 5.050248 5.286581 5.453771 5.602544 5.781926 6.016881 6.293841 6.557515 #>    5 4.960737 5.404857 5.806037 6.118549 6.309376 6.375844 6.348706 6.277713 #>    6 4.536078 4.841018 5.121579 5.377638 5.607507 5.800539 5.933948 5.977824 #>     year #> iter     1984     1985     1986     1987     1988     1989     1990     1991 #>    1 6.536062 6.414898 6.229404 5.995094 5.741936 5.509966 5.340945 5.270456 #>    2 6.171891 6.052408 5.808446 5.480362 5.130028 4.821180 4.604347 4.511332 #>    3 6.289585 6.188977 5.980397 5.707314 5.422726 5.179033 5.020492 4.979249 #>    4 6.724597 6.718401 6.510758 6.142977 5.708274 5.310873 5.032655 4.922386 #>    5 6.209481 6.169424 6.154813 6.138751 6.085106 5.969680 5.798189 5.609631 #>    6 5.908269 5.723119 5.450447 5.142996 4.862249 4.662082 4.580235 4.636929 #>     year #> iter     1992     1993     1994     1995     1996     1997     1998     1999 #>    1 5.322486 5.506461 5.813930 6.214739 6.655145 7.062988 7.362094 7.492209 #>    2 4.557132 4.743027 5.057535 5.474650 5.951724 6.430529 6.843185 7.123068 #>    3 5.073930 5.308171 5.667561 6.115830 6.594730 7.032212 7.358922 7.525325 #>    4 5.000133 5.263585 5.688082 6.221409 6.781028 7.263337 7.568202 7.630270 #>    5 5.463285 5.419201 5.522712 5.794446 6.220005 6.737256 7.230399 7.550883 #>    6 4.836438 5.167061 5.599342 6.085713 6.565595 6.976354 7.265568 7.398740 #>     year #> iter     2000     2001     2002     2003     2004     2005     2006     2007 #>    1 7.425022 7.168588 6.760787 6.257063 5.718420 5.201836 4.753435 4.404603 #>    2 7.218313 7.104489 6.793185 6.331816 5.792746 5.254788 4.784880 4.427244 #>    3 7.510353 7.319034 6.975065 6.515436 5.988297 5.450116 4.958223 4.560988 #>    4 7.439697 7.040574 6.509797 5.930163 5.370078 4.875030 4.468462 4.157003 #>    5 7.573341 7.260025 6.682954 5.983382 5.303170 4.738263 4.330404 4.081430 #>    6 7.360144 7.150678 6.787302 6.304424 5.753283 5.194684 4.686880 4.273825 #>     year #> iter     2008     2009     2010     2011     2012     2013     2014     2015 #>    1 4.170835 4.052234 4.033924 4.085386 4.161336 4.208617 4.181356 4.059196 #>    2 4.201584 4.106244 4.120939 4.207881 4.314268 4.382012 4.366160 4.253370 #>    3 4.289901 4.156584 4.152207 4.246085 4.384809 4.498772 4.522813 4.424717 #>    4 3.936579 3.797053 3.724952 3.704665 3.718892 3.748913 3.775386 3.780268 #>    5 3.970325 3.963597 4.020554 4.097220 4.152581 4.156399 4.095348 3.973656 #>    6 3.979826 3.809955 3.753372 3.785522 3.870048 3.963062 4.022771 4.022707 #>     year #> iter     2016     2017     2018     2019     2020     2021     2022 #>    1 3.855456 3.608254 3.360602 3.143095 2.966887 2.826042 2.705600 #>    2 4.066499 3.851125 3.653388 3.503481 3.409699 3.361066 3.335758 #>    3 4.220988 3.965106 3.717786 3.521188 3.389055 3.310015 3.258705 #>    4 3.749541 3.675965 3.560504 3.411573 3.242283 3.066544 2.895393 #>    5 3.807933 3.618983 3.424836 3.237175 3.061167 2.897311 2.743786 #>    6 3.960515 3.855870 3.738417 3.633917 3.555333 3.501284 3.460793 indat3 <- as.data.frame(bbs_smooth_data)      fitted_smooths_wide <- fit_smooths(indat3, start_yr = NA, end_yr = NA, longform = FALSE)      fitted_smooths <- fit_smooths(indat3, start_yr = NA, end_yr = NA, longform = TRUE)"},{"path":"https://ninoxconsulting.github.io/birdtrends/articles/Estimate-and-project-trends-using-BBS-smooth-dataset.html","id":"calculate-trend","dir":"Articles","previous_headings":"2. Extract the smooth component of bbsBayes2 fit","what":"3. Calculate trend","title":"Estimate-and-project-trends-using-BBS-smooth-dataset","text":"can summarise trend estimates provide median confidence internal","code":"trend_sm <- get_trend(fitted_smooths, start_yr = 2014, end_yr = 2022, method = \"gmean\") trend_sm |>    dplyr::mutate(trend_q0.025 = quantile(trend_log, 0.025),          trend_q0.500 = quantile(trend_log,0.500),          trend_q0.975 = quantile(trend_log,0.975)) |>    dplyr::select(c(trend_q0.025, trend_q0.500, trend_q0.975)) |>    distinct() #> # A tibble: 1 × 3 #>   trend_q0.025 trend_q0.500 trend_q0.975 #>          <dbl>        <dbl>        <dbl> #> 1      -0.0563      -0.0329      -0.0106"},{"path":"https://ninoxconsulting.github.io/birdtrends/articles/Estimate-and-project-trends-using-BBS-smooth-dataset.html","id":"project-trend","dir":"Articles","previous_headings":"2. Extract the smooth component of bbsBayes2 fit","what":"4. Project trend","title":"Estimate-and-project-trends-using-BBS-smooth-dataset","text":"can now use modeled annual indices estimated trends given years project future.","code":"preds_sm <- proj_trend(fitted_smooths, trend_sm, start_yr = 2023, proj_yr = 2050) #> hold tight, running the numbers! #> ================================================================================"},{"path":"https://ninoxconsulting.github.io/birdtrends/articles/Estimate-and-project-trends-using-BBS-smooth-dataset.html","id":"plot-the-projected-values","dir":"Articles","previous_headings":"2. Extract the smooth component of bbsBayes2 fit","what":"5. Plot the projected values","title":"Estimate-and-project-trends-using-BBS-smooth-dataset","text":"Now lets plot results, make “pretty plot” use steps worked . includes 1) raw observed indices, 2) modeled indices, 3) projected indices generated trends. Note plot posterior draws input data raw annual estimates. cases raw indices supplied, values based 95% distribution data.  Alternatively can add raw annual indices data set improve aesthetics plot.","code":"smooth_plot <- plot_trend(raw_indices = NULL,                              model_indices = fitted_smooths,                              pred_indices = preds_sm,                              start_yr = 2014,                              end_yr = 2022) smooth_plot indat1 <- annual_indicies_data  smooth_plot2 <- plot_trend(raw_indices = indat1,                              model_indices = fitted_smooths,                              pred_indices = preds_sm,                              start_yr = 2014,                              end_yr = 2022) smooth_plot2"},{"path":"https://ninoxconsulting.github.io/birdtrends/articles/Estimate-and-project-trends-using-annual-indices-datasets.html","id":"set-up","dir":"Articles","previous_headings":"","what":"1. Set-up","title":"Estimate and projecttrends over time","text":"Lets start loading libraries required.","code":"library(birdtrends) library(ggplot2) library(mgcv) library(dplyr) library(tidyr)"},{"path":"https://ninoxconsulting.github.io/birdtrends/articles/Estimate-and-project-trends-using-annual-indices-datasets.html","id":"model-the-annual-indices-based-on-input-data-of-observed-annual-indices-","dir":"Articles","previous_headings":"","what":"2. Model the annual indices based on input data of observed annual indices.","title":"Estimate and projecttrends over time","text":"many cases, may access breadth information retained estimating original modeled annual indices. example data set provided within package. annual estimate Pacific Wren (“Troglodytes pacificus”), generated using bbsBayes2 package. data kindly provided .C. Smith. example data set annual index 1968 2022, along credible intervals 2.5% 97.5%.","code":"head(annual_indicies_data) #> # A tibble: 6 × 4 #>    year index index_q_0.025 index_q_0.975 #>   <dbl> <dbl>         <dbl>         <dbl> #> 1  1968  2.70          1.90          3.85 #> 2  1969  2.37          1.70          3.29 #> 3  1970  2.80          2.09          3.79 #> 4  1971  3.09          2.29          4.18 #> 5  1972  3.32          2.49          4.42 #> 6  1973  3.79          3.04          4.77"},{"path":"https://ninoxconsulting.github.io/birdtrends/articles/Estimate-and-project-trends-using-annual-indices-datasets.html","id":"fit-a-bayesian-heirachial-gam-hgam","dir":"Articles","previous_headings":"2. Model the annual indices based on input data of observed annual indices.","what":"2.1 Fit a Bayesian Heirachial GAM (HGAM)","title":"Estimate and projecttrends over time","text":"can fit hierarchical Bayesian General Additive Model (HGAM) estimate overall trend species years, specific date range. model fits smooth time-series function (.e., GAM) log-transformed annual estimates relative abundance, accounting uncertainty annual estimate (.e., Hierarchical aspect). measurement-error model assumes independence errors annual estimate. independence assumption false many sets estimates (e.g., estimates drawn model includes explicit temporal structure), making independence assumption reasonable absence known autocorrelation structure annual errors.","code":"indat1 <- annual_indicies_data  fitted_data <- fit_hgam(indat1, start_yr = NA, end_yr = NA, n_knots = NA) #> Running MCMC with 4 parallel chains... #>  #> Chain 1 finished in 2.1 seconds. #> Chain 3 finished in 2.1 seconds. #> Chain 4 finished in 2.0 seconds. #> Chain 2 finished in 2.2 seconds. #>  #> All 4 chains finished successfully. #> Mean chain execution time: 2.1 seconds. #> Total execution time: 2.4 seconds.  # output the same data in a long format for plotting purposes  fitted_data_wide <- fit_hgam(indat1, start_yr = NA, end_yr = NA, n_knots = NA, longform = FALSE) #> Running MCMC with 4 parallel chains... #>  #> Chain 1 finished in 2.1 seconds. #> Chain 3 finished in 2.1 seconds. #> Chain 4 finished in 2.1 seconds. #> Chain 2 finished in 2.3 seconds. #>  #> All 4 chains finished successfully. #> Mean chain execution time: 2.2 seconds. #> Total execution time: 2.4 seconds.   ## We can also define the start and end time points or number of knots   # fitted_data <- fit_hgam(indat1, start_yr = 1990, end_yr = 2014, n_knots = NA)"},{"path":"https://ninoxconsulting.github.io/birdtrends/articles/Estimate-and-project-trends-using-annual-indices-datasets.html","id":"explore-the-results","dir":"Articles","previous_headings":"2. Model the annual indices based on input data of observed annual indices.","what":"2.2 Explore the results","title":"Estimate and projecttrends over time","text":"Select subset fitted HGAM models reformat long format. example selected 100 rows simplicity. can reformat original data use plot Now can plot predicted posterior distributions 100 draws, along raw annual indices data provided.","code":"sel_hgams <- fitted_data_wide %>%   dplyr::slice_sample(., n = 100) %>%     dplyr::mutate(draw = seq(1, 100, 1)) %>%    tidyr::pivot_longer(., cols = !starts_with(\"d\")) |>    dplyr::mutate(yearn = as.integer(name) - min(as.integer(name))) min_year <- as.numeric(min(sel_hgams$name)) max_year <- as.numeric(max(sel_hgams$name))  indat1 <- indat1 |>    filter(year >= min_year & year <= max_year)%>%   dplyr::mutate(yearn = as.integer(year) - min(as.integer(year))) comp_plot <- ggplot2::ggplot(data = sel_hgams,                     ggplot2::aes(x = yearn,y = value,                         group = draw, colour = draw))+   ggplot2::geom_pointrange(data = indat1,                   ggplot2::aes(x = yearn, y = index,                       ymin = index_q_0.025,                       ymax = index_q_0.975),                   inherit.aes = FALSE,                   alpha = 0.3)+   ggplot2::geom_line(alpha = 0.3)+   ggplot2::scale_colour_viridis_c() +   ggplot2::scale_y_continuous(trans = \"log10\")+   ggplot2::theme_bw() comp_plot"},{"path":"https://ninoxconsulting.github.io/birdtrends/articles/Estimate-and-project-trends-using-annual-indices-datasets.html","id":"estimate-trends","dir":"Articles","previous_headings":"","what":"3. Estimate trends","title":"Estimate and projecttrends over time","text":"can use modeled values (fitted_data) estimate trend given period time. can used project future. Firstly lets review data file, can see row contains estimated indices per year per posterior draw (n = 4000). total lenght file number draws x number years data. Now can estimate trend based given time internal method estimating trends. dates specified, minimum maximum years used. Two methods available estimate trends; 1) Geometric mean 2) Linear regression. can summarise trend estimates provide median confidence internal","code":"head(fitted_data) #> # A tibble: 6 × 3 #>    draw  year proj_y #>   <int> <int>  <dbl> #> 1     1  1968   2.17 #> 2     1  1969   2.36 #> 3     1  1970   2.58 #> 4     1  1971   2.85 #> 5     1  1972   3.17 #> 6     1  1973   3.55 trend_sm <- get_trend(fitted_data, start_yr = 2014, end_yr = 2022, method = \"gmean\") head(trend_sm) #> # A tibble: 6 × 3 #>    draw trend_log perc_trend #>   <int>     <dbl>      <dbl> #> 1     1  -0.00423     -0.422 #> 2     2  -0.00303     -0.303 #> 3     3  -0.0287      -2.83  #> 4     4  -0.0214      -2.12  #> 5     5  -0.0138      -1.37  #> 6     6  -0.0171      -1.69 trend_sm |>    dplyr::mutate(trend_q0.025 = quantile(trend_log, 0.025),          trend_q0.500 = quantile(trend_log,0.500),          trend_q0.975 = quantile(trend_log,0.975)) |>    dplyr::select(c(trend_q0.025, trend_q0.500, trend_q0.975)) |>    distinct() #> # A tibble: 1 × 3 #>   trend_q0.025 trend_q0.500 trend_q0.975 #>          <dbl>        <dbl>        <dbl> #> 1      -0.0346      -0.0144      0.00558"},{"path":"https://ninoxconsulting.github.io/birdtrends/articles/Estimate-and-project-trends-using-annual-indices-datasets.html","id":"project-trend","dir":"Articles","previous_headings":"","what":"4. Project trend","title":"Estimate and projecttrends over time","text":"can now use modeled annual indices estimated trends given years project future.","code":"preds_sm <- proj_trend(fitted_data, trend_sm, start_yr = 2023, proj_yr = 2050) #> hold tight, running the numbers! #> ================================================================================ head(preds_sm) #> # A tibble: 6 × 4 #>    draw  year proj_y pred_ind #>   <int> <dbl>  <dbl>    <dbl> #> 1     1  1968   2.17     2.17 #> 2     1  1969   2.36     2.36 #> 3     1  1970   2.58     2.58 #> 4     1  1971   2.85     2.85 #> 5     1  1972   3.17     3.17 #> 6     1  1973   3.55     3.55"},{"path":"https://ninoxconsulting.github.io/birdtrends/articles/Estimate-and-project-trends-using-annual-indices-datasets.html","id":"plot-the-projected-values","dir":"Articles","previous_headings":"","what":"5. Plot the projected values","title":"Estimate and projecttrends over time","text":"Now lets plot results, make “pretty plot” use steps worked . includes 1) raw observed indices, 2) modeled indices, 3) projected indices generated trends.","code":"hgams_plot <- plot_trend(raw_indices = indat1,                            model_indices = fitted_data,                            pred_indices = preds_sm,                           start_yr = 2014,                            end_yr = 2022)"},{"path":"https://ninoxconsulting.github.io/birdtrends/articles/Estimate-and-project-trends-using-annual-indices-datasets.html","id":"additional-targets-and-trend-estimates","dir":"Articles","previous_headings":"","what":"Additional targets and trend estimates","title":"Estimate and projecttrends over time","text":"may also want track predictions tracking relation short term trends. example species identified partners flight short long term trends. example may identify population change given time step (.e. 2014) short long term trend percentage change population. example may short term target 2024 range -2% 1% can calculate annual index targets range . can added plots identify range need meet predictions tracking.","code":"index_baseline <- get_targets(model_indices = fitted_data,                                ref_year = 2014,                                st_year = 2026,                                st_lu_target_pc = -2,                               st_up_target_pc = 1,                                lt_year = 2046,                                lt_lu_target_pc = 5,                               lt_up_target_pc = 10) hgams_plot_target <- plot_trend(raw_indices = indat1,                            model_indices = fitted_data,                            pred_indices = preds_sm,                           start_yr = 2014,                            end_yr = 2022,                            ref_yr = 2014,                           targets = index_baseline)"},{"path":"https://ninoxconsulting.github.io/birdtrends/articles/Estimate-and-project-trends-using-annual-indices-datasets.html","id":"estimate-confidence-of-reaching-targets","dir":"Articles","previous_headings":"","what":"Estimate confidence of reaching targets","title":"Estimate and projecttrends over time","text":"can use output trends estimate uncertainty around meeting future trends. example can estimate probability meet short- term long-term targets. theoretical targets example short term (decrease 2% increase 1%) long term target (2046) (increase 5 10% )","code":"#  # prop_st <- calculate_probs(predicted_trends = preds_sm, #                 ref_year = 2014,  #                 targ_year = 2026,  #                 prob_decrease = 2, #                 prob_increase = 1) #  # prop_lt <- calculate_probs(predicted_trends = preds_sm, #                 ref_year = 2014,  #                 targ_year = 2046, #                 prob_increase = c(5,10)) #  #  # prop_st # prop_lt"},{"path":"https://ninoxconsulting.github.io/birdtrends/articles/Estimate-and-project-trends-using-posterior-distribution-draws.html","id":"set-up","dir":"Articles","previous_headings":"","what":"1. Set-up","title":"Estimate-and-project-trends-using-posterior-distribution-draws","text":"Lets start loading libraries required.","code":"library(birdtrends) library(ggplot2) library(mgcv) library(dplyr) library(tidyr)"},{"path":"https://ninoxconsulting.github.io/birdtrends/articles/Estimate-and-project-trends-using-posterior-distribution-draws.html","id":"extract-the-smooth-component-of-bbsbayes2-fit","dir":"Articles","previous_headings":"","what":"2. Extract the smooth component of bbsBayes2 fit","title":"Estimate-and-project-trends-using-posterior-distribution-draws","text":"example data set, draws posterior distribution annual indices provided within package Pacific Wren (“Troglodytes pacificus”), generated using bbsBayes2 package. data kindly provided .C. Smith. dataset derived using bbsBayes model, Bayesdian trend model output provide suitable input. example data set draws posterior ditribution trend model 1968 2022.","code":"head(posterior_draws_data) #>       1968     1969     1970     1971     1972     1973     1974     1975 #> 1 3.082610 3.015123 3.335139 3.489513 3.998989 3.619001 4.508912 4.264301 #> 2 2.195914 1.689211 2.546438 2.447753 2.762040 3.587828 3.401666 3.499648 #> 3 2.916118 2.926004 2.971770 3.579696 3.940871 3.867168 4.009389 3.655491 #> 4 1.820746 1.737737 2.070640 2.766285 3.131045 4.084060 4.052145 4.393454 #> 5 2.356744 2.349365 2.584446 3.466212 2.953743 3.166799 3.750321 3.728934 #> 6 2.646876 2.168418 3.196975 2.731517 3.482707 4.229086 3.879769 4.131091 #>       1976     1977     1978     1979     1980     1981     1982     1983 #> 1 5.523679 6.477107 5.428108 5.070019 5.697802 6.108185 5.501953 7.615102 #> 2 3.944120 4.987994 7.100491 4.716335 5.250659 5.678874 6.286118 7.503666 #> 3 4.725060 5.643631 5.362977 3.814058 4.555867 5.065963 6.022628 7.630880 #> 4 5.303943 5.844403 6.731438 5.031135 5.325335 6.434128 5.890515 8.319976 #> 5 4.691596 6.391333 6.529072 5.253243 5.370466 5.762340 6.074689 7.690788 #> 6 4.975420 4.983748 5.818747 4.391093 6.065233 6.370119 5.694978 6.405580 #>       1984     1985     1986     1987     1988     1989     1990     1991 #> 1 6.639433 6.003091 6.078570 5.656441 5.677746 5.447478 6.968777 4.539658 #> 2 5.256168 5.794810 5.386139 5.227932 5.588750 5.061077 6.958566 4.470953 #> 3 6.494724 6.363043 5.058897 4.696674 5.452792 4.959325 6.637491 4.231191 #> 4 5.390953 5.163086 6.493480 5.699207 5.351699 5.243212 6.556881 4.726460 #> 5 6.971874 6.452838 5.436969 5.631339 5.335568 5.128908 6.775527 4.713633 #> 6 4.582359 4.919383 5.126643 4.781984 5.503255 5.517258 6.281919 4.550026 #>       1992     1993     1994     1995     1996     1997     1998     1999 #> 1 5.618873 3.994067 5.803611 6.028075 5.844031 6.687735 8.833021 7.131837 #> 2 5.051767 4.109664 4.637254 5.879644 5.372946 5.837089 8.577663 6.594505 #> 3 5.171576 3.972754 5.647608 6.182540 6.328446 6.258666 9.045663 7.774180 #> 4 5.796054 4.605419 5.713425 6.473453 5.568326 6.766745 8.318567 7.352257 #> 5 6.439859 4.625376 5.527326 6.101939 6.042497 5.961249 9.189403 6.880410 #> 6 5.449645 4.413135 5.369394 5.551198 5.129341 6.110091 7.972287 7.356251 #>       2000     2001     2002     2003     2004     2005     2006     2007 #> 1 6.698147 8.112948 6.781053 6.342629 5.114471 4.780090 5.894585 4.826077 #> 2 6.615099 7.017240 6.268967 6.384377 5.077061 4.518664 4.923334 5.219011 #> 3 7.233299 9.932660 6.906731 6.971747 5.142817 4.748727 6.886231 4.866096 #> 4 7.419301 7.266199 7.047002 6.079024 4.837489 4.992385 4.916099 5.142322 #> 5 6.543977 8.871820 6.585936 6.221444 5.067310 4.375974 5.296561 4.770052 #> 6 7.489337 7.089186 6.878845 5.835814 4.956890 5.340337 4.719808 4.568851 #>       2008     2009     2010     2011     2012     2013     2014     2015 #> 1 4.041358 3.311982 3.956497 3.677391 4.133665 4.523377 4.154316 3.790820 #> 2 3.815540 2.858512 4.540620 3.186778 3.015334 5.003184 3.879132 4.193345 #> 3 4.252738 3.321772 4.616294 3.554062 3.549213 4.339809 3.990611 3.759318 #> 4 3.714625 3.256193 3.857840 2.952423 3.489479 4.673957 3.571859 3.572310 #> 5 4.099561 3.896718 4.153645 3.561329 3.402610 4.569009 3.715163 3.555024 #> 6 3.546721 2.805329 3.894595 3.081243 4.037600 4.772590 4.130292 4.412891 #>       2016     2017     2018     2019     2020     2021     2022 #> 1 4.338010 2.802719 3.660448 3.050623 2.767314 4.349836 3.403097 #> 2 4.957471 3.246485 3.143533 2.772658 3.567344 4.593318 3.771982 #> 3 4.886972 3.182487 3.408514 3.436348 3.423210 4.834125 3.417634 #> 4 4.730020 2.905104 3.396004 2.709231 3.076085 3.792921 3.240671 #> 5 4.257917 2.528496 3.035860 3.186154 3.412096 4.005358 3.220321 #> 6 5.149085 3.517740 3.621099 3.273938 2.909139 4.227224 3.385283"},{"path":"https://ninoxconsulting.github.io/birdtrends/articles/Estimate-and-project-trends-using-posterior-distribution-draws.html","id":"fit-a-generalized-additive-model-to-each-draw-gam","dir":"Articles","previous_headings":"2. Extract the smooth component of bbsBayes2 fit","what":"2.1 Fit a generalized additive model to each draw (GAM)","title":"Estimate-and-project-trends-using-posterior-distribution-draws","text":"can fit General Additive Model (GAM) draw estimate overall trend species years, specific date range. model fits smooth time-series function (.e., GAM) log-transformed annual estimates relative abundance.","code":"indat2 <- as.data.frame(posterior_draws_data)      fitted_data <- fit_gam(indat2)"},{"path":"https://ninoxconsulting.github.io/birdtrends/articles/Estimate-and-project-trends-using-posterior-distribution-draws.html","id":"calculate-trend","dir":"Articles","previous_headings":"2. Extract the smooth component of bbsBayes2 fit","what":"3. Calculate trend","title":"Estimate-and-project-trends-using-posterior-distribution-draws","text":"can summarise trend estimates provide median confidence internal","code":"trend_sm <- get_trend(fitted_data, start_yr = 2014, end_yr = 2022, method = \"gmean\") trend_sm |>    dplyr::mutate(trend_q0.025 = quantile(trend_log, 0.025),          trend_q0.500 = quantile(trend_log,0.500),          trend_q0.975 = quantile(trend_log,0.975)) |>    dplyr::select(c(trend_q0.025, trend_q0.500, trend_q0.975)) |>    distinct() #> # A tibble: 1 × 3 #>   trend_q0.025 trend_q0.500 trend_q0.975 #>          <dbl>        <dbl>        <dbl> #> 1      -0.0295     -0.00968       0.0119"},{"path":"https://ninoxconsulting.github.io/birdtrends/articles/Estimate-and-project-trends-using-posterior-distribution-draws.html","id":"project-trend","dir":"Articles","previous_headings":"2. Extract the smooth component of bbsBayes2 fit","what":"4. Project trend","title":"Estimate-and-project-trends-using-posterior-distribution-draws","text":"can now use modeled annual indices estimated trends given years project future.","code":"preds_sm <- proj_trend(fitted_data, trend_sm, start_yr = 2023, proj_yr = 2050) #> ================================================================================"},{"path":"https://ninoxconsulting.github.io/birdtrends/articles/Estimate-and-project-trends-using-posterior-distribution-draws.html","id":"plot-the-projected-values","dir":"Articles","previous_headings":"2. Extract the smooth component of bbsBayes2 fit","what":"5. Plot the projected values","title":"Estimate-and-project-trends-using-posterior-distribution-draws","text":"Now lets plot results, make “pretty plot” use steps worked . includes 1) raw observed indices, 2) modeled indices, 3) projected indices generated trends. Note plot posterior draws input data raw annual estimates. cases raw indices supplied, values based 95% distribution data.","code":"gam_plot <- plot_trend(raw_indices = NULL,                              model_indices = fitted_data,                              pred_indices = preds_sm,                              start_yr = 2014,                              end_yr = 2022) gam_plot"},{"path":"https://ninoxconsulting.github.io/birdtrends/articles/Getting_started.html","id":"getting-set-up","dir":"Articles","previous_headings":"","what":"Getting set-up","title":"Getting_started","text":"Install birdtrends Set modelling connections. birdtrends package uses cmdstanr package run hierarchical GAM models using Stan. can install cmdstanr : cmdstanr package turn requires cmdstan program run Stan programs. can use cmdstanr package cmdstan: check cmdstan installed properly:","code":"remotes::install_github(\"ninoxconsulting/birdtrends\") install.packages(\"cmdstanr\", repos = c(\"https://mc-stan.org/r-packages/\",                                        getOption(\"repos\"))) cmdstanr::install_cmdstan() cmdstanr::check_cmdstan_toolchain()"},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://ninoxconsulting.github.io/birdtrends/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Genevieve Perkins. Author, maintainer. Adam C. Smith. Author.","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Perkins G, Smith (2024). birdtrends: Estimate Trends Based Modelled Annual Indices Related Inputs. R package version 0.0.0.9000, https://ninoxconsulting.github.io/birdtrends/, https://github.com/ninoxconsulting/birdtrends.","code":"@Manual{,   title = {birdtrends: Estimate Trends Based On Modelled Annual Indices Or Related Inputs},   author = {Genevieve Perkins and Adam C. Smith},   year = {2024},   note = {R package version 0.0.0.9000, https://ninoxconsulting.github.io/birdtrends/},   url = {https://github.com/ninoxconsulting/birdtrends}, }"},{"path":"https://ninoxconsulting.github.io/birdtrends/index.html","id":"birdtrends","dir":"","previous_headings":"","what":"Estimate Trends Based On Modelled Annual Indices Or Related Inputs","title":"Estimate Trends Based On Modelled Annual Indices Or Related Inputs","text":"goal birdtrends package provide flexible toolkit estimate population trends (based annual indices uncertainty similar data inputs), predict future trends, compare temporal trends time.","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/index.html","id":"data-input-types","dir":"","previous_headings":"","what":"Data Input Types","title":"Estimate Trends Based On Modelled Annual Indices Or Related Inputs","text":"package currently accommodates three types input data: Annual indices relative abundance CI estimates (.e. index, upper lower confidence interval) Matrix estimated index based Bayesian modeled posterior draws (rows) year (columns) representing full annual indices relative abundance. Matrix posterior draws (rows) year (columns) based smoothed annual indices relative abundance.","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/index.html","id":"estimating-annual-indices","dir":"","previous_headings":"","what":"Estimating annual indices","title":"Estimate Trends Based On Modelled Annual Indices Or Related Inputs","text":"Depending input data type, various methods available estimate trend given time period. Note case datatype 3 already represents modeled smooth generated original modeled relative population abundance. data input 1: can fit hierarchical Bayesian General Additive Model (HGAM), using annual indices uncertainty values. data input 2: can fit GAM posterior draw data input 3: data represents smoothed output can used directly trend assessment.","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/index.html","id":"estimate-trend-between-given-time-points","dir":"","previous_headings":"","what":"Estimate trend between given time points","title":"Estimate Trends Based On Modelled Annual Indices Or Related Inputs","text":"can use two time points estimate trend. default method uses geometric mean estimate average change values time period. Alternatively can assess trend based linear regression two points.","code":""},{"path":[]},{"path":"https://ninoxconsulting.github.io/birdtrends/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Estimate Trends Based On Modelled Annual Indices Or Related Inputs","text":"can install development version birdtrends GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"ninoxconsulting/birdtrends\")"},{"path":"https://ninoxconsulting.github.io/birdtrends/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Estimate Trends Based On Modelled Annual Indices Or Related Inputs","text":"basic example shows solve common problem:","code":"#library(birdtrends) ## basic example code"},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/annual_indicies_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Pacific Wren annual indices from 1968 to 2022 — annual_indicies_data","title":"Pacific Wren annual indices from 1968 to 2022 — annual_indicies_data","text":"example annual indices Pacific Wren","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/annual_indicies_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pacific Wren annual indices from 1968 to 2022 — annual_indicies_data","text":"","code":"annual_indicies_data"},{"path":[]},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/annual_indicies_data.html","id":"annual-indicies-data","dir":"Reference","previous_headings":"","what":"annual_indicies_data","title":"Pacific Wren annual indices from 1968 to 2022 — annual_indicies_data","text":"tibble 55 rows 4 columns: year year indices index annual index index_q_0.025 confidence interval 2.5% index_q_0.975 confidence interval 97.5%","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/annual_indicies_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Pacific Wren annual indices from 1968 to 2022 — annual_indicies_data","text":"https://github.com/bbsBayes/bbsBayes2/tree/main","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/bbs_smooth_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Pacific Wren bbs Smooth output from 1968 to 2022 — bbs_smooth_data","title":"Pacific Wren bbs Smooth output from 1968 to 2022 — bbs_smooth_data","text":"example posterior draws smooth component BBS model Pacific Wren","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/bbs_smooth_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pacific Wren bbs Smooth output from 1968 to 2022 — bbs_smooth_data","text":"","code":"bbs_smooth_data"},{"path":[]},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/bbs_smooth_data.html","id":"bbs-smooth-data","dir":"Reference","previous_headings":"","what":"bbs_smooth_data","title":"Pacific Wren bbs Smooth output from 1968 to 2022 — bbs_smooth_data","text":"tibble 55 rows 4 columns: year year indices index annual index index_q_0.025 confidence interval 2.5% index_q_0.975 confidence interval 97.5%","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/bbs_smooth_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Pacific Wren bbs Smooth output from 1968 to 2022 — bbs_smooth_data","text":"https://github.com/bbsBayes/bbsBayes2/tree/main","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/birdtrends-package.html","id":null,"dir":"Reference","previous_headings":"","what":"birdtrends: Estimate Trends Based On Modelled Annual Indices Or Related Inputs — birdtrends-package","title":"birdtrends: Estimate Trends Based On Modelled Annual Indices Or Related Inputs — birdtrends-package","text":"package provides flexible framework generate trends, based actual modeled annual indices data. package designed undertake assessment 2016 Partners Flight Landbird Conservation objectives.","code":""},{"path":[]},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/birdtrends-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"birdtrends: Estimate Trends Based On Modelled Annual Indices Or Related Inputs — birdtrends-package","text":"Maintainer: Genevieve Perkins genevieve.c.perkins@gmail.com (ORCID) Authors: Adam C. Smith adam.smith2@canada.ca","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/calculate_probs.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate probability of meeting targets — calculate_probs","title":"Calculate probability of meeting targets — calculate_probs","text":"Calculate probability meeting targets","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/calculate_probs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate probability of meeting targets — calculate_probs","text":"","code":"calculate_probs(   projected_trends = preds_sm,   ref_year = 2014,   targ_year = 2026,   prob_decrease = NULL,   prob_increase = NULL )"},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/calculate_probs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate probability of meeting targets — calculate_probs","text":"projected_trends tibble draws, years, projected trends, output proj_trend function ref_year numeric year change measured .e. 2014 targ_year numeric year target reached .e. 2026 prob_decrease numeric vector predicted target increase. .e c(25, 35). Determine probability trend increase 25% 35% target year prob_increase numeric vector predicted target decrease. .e c(25, 35). Determine probability trend decline 25% 35% target year","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/calculate_probs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate probability of meeting targets — calculate_probs","text":"tibble average percent change addition probability increase decrease","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/calculate_probs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate probability of meeting targets — calculate_probs","text":"","code":"if (FALSE) { # \\dontrun{   test_st <- calculate_probs(predicted_trends = preds_sm,         ref_year = 2014,         targ_year = 2026,         prob_increase = c(targ$st_pop_pc_lower,targ$st_pop_pc_uppper)) } # }"},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/fit_gam.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit gam models on posterior draws — fit_gam","title":"Fit gam models on posterior draws — fit_gam","text":"Fit gam models posterior draws","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/fit_gam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit gam models on posterior draws — fit_gam","text":"","code":"fit_gam(indata, start_yr = NA, end_yr = NA, n_knots = NA, longform = TRUE)"},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/fit_gam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit gam models on posterior draws — fit_gam","text":"indata dataframe posterior draws. column year, row posterior draw start_yr numeric year start model. Default first year available end_yr numeric year end model. Default last year available n_knots number knots used gam model, default 5 longform TRUE/FALSE output converted longform tibble columns draw, year, proj_y. Default = TRUE","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/fit_gam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit gam models on posterior draws — fit_gam","text":"dataframe predicted","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/fit_gam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit gam models on posterior draws — fit_gam","text":"","code":"if (FALSE) { # \\dontrun{ pred_dataset <- fit_gam(indat2, start_yr = 1990, end_yr = 2020, n_knots = 14) } # }"},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/fit_hgam.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit hierarchical GAM using annual indices and confidence interval — fit_hgam","title":"Fit hierarchical GAM using annual indices and confidence interval — fit_hgam","text":"Fit hierarchical GAM using annual indices confidence interval","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/fit_hgam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit hierarchical GAM using annual indices and confidence interval — fit_hgam","text":"","code":"fit_hgam(indata, start_yr = NA, end_yr = NA, n_knots = NA, longform = TRUE)"},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/fit_hgam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit hierarchical GAM using annual indices and confidence interval — fit_hgam","text":"indata dataframe annual indices year (row) confidence intervals start_yr numeric year start model. Default first year available end_yr numeric year end model. Default last year available n_knots number knots used HGAM model, using default one knot per 4 years data longform TRUE/FALSE output converted longform tibble columns draw, year, proj_y. Default = TRUE","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/fit_hgam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit hierarchical GAM using annual indices and confidence interval — fit_hgam","text":"tibble modeled HGAM indices given years","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/fit_hgam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit hierarchical GAM using annual indices and confidence interval — fit_hgam","text":"","code":"if (FALSE) { # \\dontrun{ outsmooth <- fit_hgam(indata = indat1, start_yr = 1970, end_yr = 2020, n_knots = 5) } # }"},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/fit_smooths.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Smooths from BBS model run — fit_smooths","title":"Extract Smooths from BBS model run — fit_smooths","text":"Extract Smooths BBS model run","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/fit_smooths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Smooths from BBS model run — fit_smooths","text":"","code":"fit_smooths(indata, start_yr = NA, end_yr = NA, longform = TRUE)"},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/fit_smooths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Smooths from BBS model run — fit_smooths","text":"indata dataframe generated smooths. column year, row predicted smooth start_yr numeric year start, subset required. Default last year available end_yr numeric year end, subset required. Default last year available longform TRUE/FALSE output converted longform tibble columns draw, year, proj_y. Default = TRUE","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/fit_smooths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Smooths from BBS model run — fit_smooths","text":"dataframe smooths generated year selected range","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/fit_smooths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Smooths from BBS model run — fit_smooths","text":"","code":"if (FALSE) { # \\dontrun{ smooths <- fit_smooths(indat3, start_yr = 1990, end_yr = 2020) } # }"},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/get_targets.html","id":null,"dir":"Reference","previous_headings":"","what":"Get target values for plotting — get_targets","title":"Get target values for plotting — get_targets","text":"Get target values plotting","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/get_targets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get target values for plotting — get_targets","text":"","code":"get_targets(   model_indices = ldf,   ref_year = 2014,   st_year = 2026,   st_lu_target_pc = -2,   st_up_target_pc = 1,   lt_year = NA,   lt_lu_target_pc = NA,   lt_up_target_pc = NA )"},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/get_targets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get target values for plotting — get_targets","text":"model_indices tibble estimated indices drawn fit_* function. Columns draw, year, proj_y ref_year numeric year targets compared , default = 2014 st_year numeric short term year targets estimated st_lu_target_pc numeric lower confidence interval percentage short term population change reference year st_year st_up_target_pc numeric upper confidence interval percentage short term population change reference year st_year lt_year numeric long term year targets estimated lt_lu_target_pc numeric lower confidence interval percentage long term population change reference year lt_year lt_up_target_pc numeric upper confidence interval percentage long term population change reference year lt_year","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/get_targets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get target values for plotting — get_targets","text":"tibble upper lower target values","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/get_targets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get target values for plotting — get_targets","text":"","code":"if (FALSE) { # \\dontrun{   hgams_plot <- get_targets(model_indices = ldf, ref_year = 2014,   st_year = 2026, st_lu_target_pc = -2,st_up_target_pc = 1,    lt_year = 2046,  lt_lu_target_pc = 5,lt_up_target_pc = 15) } # }"},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/get_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate trend based based on multiple draws of annual indices — get_trend","title":"Generate trend based based on multiple draws of annual indices — get_trend","text":"Generate trend based based multiple draws annual indices","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/get_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate trend based based on multiple draws of annual indices — get_trend","text":"","code":"get_trend(proj_data, start_yr = NA, end_yr = NA, method = \"gmean\")"},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/get_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate trend based based on multiple draws of annual indices — get_trend","text":"proj_data tibble estimated indices drawn fit_* function. Columns draw, year, proj_y start_yr numeric value first year trend calculated. Default first available year within dataset end_yr numeric vlaue representing last year trend calculated. Default first available year within dataset method character method used calculate trend. Two methods available; geometric mean (\"gmean\" default )\"lm\" linear regression","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/get_trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate trend based based on multiple draws of annual indices — get_trend","text":"tibble estimated trend percent_trend draw","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/get_trend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate trend based based on multiple draws of annual indices — get_trend","text":"","code":"if (FALSE) { # \\dontrun{  ldf_smooths <- tibble::rowid_to_column(fitted_smooths, \"draw\") %>%       tidyr::pivot_longer(., cols = !starts_with(\"d\")) %>%       dplyr::rename('year' = name, \"proj_y\" = value)%>%       dplyr::mutate(year = as.integer(year))  trend_sm <- get_trend(ldf_smooths, start_yr = 2014, end_yr = 2022, method = \"gmean\") } # }"},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/plot_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot predicted trends — plot_trend","title":"Plot predicted trends — plot_trend","text":"Plot predicted trends","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/plot_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot predicted trends — plot_trend","text":"","code":"plot_trend(   raw_indices = NULL,   model_indices = fitted_data,   pred_indices = preds_sm,   start_yr = 2014,   end_yr = 2022,   ref_yr = 2014,   targets = NULL )"},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/plot_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot predicted trends — plot_trend","text":"raw_indices tibble raw annual index value observed data columns = year, index, index_q_0.25 = 2.5% confidence interval index_q_0.975 = 97.5 % confidence interval. raw indices unavavilable generated based 5 95 percent range model_indices tibble estimated indices drawn fit_* function. Columns draw, year, proj_y pred_indices datatable modeled predicted values future start_yr numeric value first year trend calculated. Default first available year within dataset end_yr numeric value representing last year trend calculated. Default first available year within dataset ref_yr numeric value representing reference year trends compared , default 2014 pif calculations targets optional tibble short term targets generated get_targets()","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/plot_trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot predicted trends — plot_trend","text":"plot","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/plot_trend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot predicted trends — plot_trend","text":"","code":"if (FALSE) { # \\dontrun{   hgams_plot <- plot_trend(raw_indices = input_option_1, model_indices = ldf_hgam,   pred_indices = preds_hgam, start_yr = 2014, end_yr = 2022) } # }"},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/posterior_draws_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Pacific Wren posterior draws output from 1968 to 2022 — posterior_draws_data","title":"Pacific Wren posterior draws output from 1968 to 2022 — posterior_draws_data","text":"example posterior draws Pacific Wren","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/posterior_draws_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pacific Wren posterior draws output from 1968 to 2022 — posterior_draws_data","text":"","code":"posterior_draws_data"},{"path":[]},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/posterior_draws_data.html","id":"posterior-draws-data","dir":"Reference","previous_headings":"","what":"posterior_draws_data","title":"Pacific Wren posterior draws output from 1968 to 2022 — posterior_draws_data","text":"tibble 55 rows 4 columns: year year indices index annual index index_q_0.025 confidence interval 2.5% index_q_0.975 confidence interval 97.5%","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/posterior_draws_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Pacific Wren posterior draws output from 1968 to 2022 — posterior_draws_data","text":"https://github.com/bbsBayes/bbsBayes2/tree/main","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/prep_hgam.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare GAM components for running stan model — prep_hgam","title":"Prepare GAM components for running stan model — prep_hgam","text":"Prepare GAM components running stan model","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/prep_hgam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare GAM components for running stan model — prep_hgam","text":"","code":"prep_hgam(   orig.preds = NA,   nknots = 6,   predpoints = NULL,   npredpoints = 100,   sm_name = \"year\" )"},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/prep_hgam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare GAM components for running stan model — prep_hgam","text":"orig.preds vector years modeled nknots numeric value number knots model predpoints values predicted. Default NULL npredpoints number values predicted. Default 100 sm_name name model column outputs, default \"year","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/prep_hgam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare GAM components for running stan model — prep_hgam","text":"list containing components  GAM model run within STAN","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/prep_hgam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare GAM components for running stan model — prep_hgam","text":"","code":"if (FALSE) { # \\dontrun{ aa <- prep_hgam(out$year, nknots = 6, predpoints = NULL, npredpoints = 100, sm_name = \"year\") } # }"},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/proj_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Project generated trends into the future — proj_trend","title":"Project generated trends into the future — proj_trend","text":"Project generated trends future","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/proj_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Project generated trends into the future — proj_trend","text":"","code":"proj_trend(proj_output, trend_output, start_yr = NA, proj_yr = 2046)"},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/proj_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Project generated trends into the future — proj_trend","text":"proj_output tibble estimated indices drawn fit_* function. Columns draw, year, proj_y trend_output tibble estimated trends generated get_trends* function. start_yr numeric year first projected date proj_yr numeric year trend projected","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/proj_trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Project generated trends into the future — proj_trend","text":"datatable modeled predicted values future","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/proj_trend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Project generated trends into the future — proj_trend","text":"","code":"if (FALSE) { # \\dontrun{  trend_sm <- predict_trend(ldf_smooths, trend_sm, start_yr = 2023, proj_yr = 2046) } # }"},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/trend_change.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate change in trend between years — trend_change","title":"Calculate change in trend between years — trend_change","text":"Calculate change trend years","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/trend_change.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate change in trend between years — trend_change","text":"","code":"trend_change(projected_trends = preds_sm, ref_year = 2014, targ_year = 2026)"},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/trend_change.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate change in trend between years — trend_change","text":"projected_trends tibble draws, years, projected trends, output proj_trend function ref_year numeric year change measured .e. 2014 targ_year numeric year target reached .e. 2026","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/trend_change.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate change in trend between years — trend_change","text":"tibble average percent change addition probability increase decrease","code":""},{"path":"https://ninoxconsulting.github.io/birdtrends/reference/trend_change.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate change in trend between years — trend_change","text":"","code":"if (FALSE) { # \\dontrun{   test_st <- trend_change(predicted_trends = preds_sm,         ref_year = 2014,         targ_year = 2026) } # }"}]
